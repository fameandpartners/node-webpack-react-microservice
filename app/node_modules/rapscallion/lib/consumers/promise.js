"use strict";

/* global setImmediate */
var Promise = require("bluebird");

var _require = require("../sequence"),
    EXHAUSTED = _require.EXHAUSTED;

var _require2 = require("./common"),
    pullBatch = _require2.pullBatch;

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

// eslint-disable-next-line max-params
function asyncBatch(renderer, pushable, resolve, reject) {
  var pull = pullBatch(renderer, pushable);

  pull.then(function (result) {
    if (result === EXHAUSTED) {
      resolve();
    } else {
      setImmediate(asyncBatch, renderer, pushable, resolve, reject);
    }
  }).catch(function (err) {
    reject(err);
  });
}

/**
 * Consumes the provided sequence and returns a promise with the concatenation of all
 * sequence segments.
 *
 * @param      {Renderer}     renderer     The Renderer from which to pull next-vals.
 *
 * @return     {Promise}                   A promise resolving to the HTML string.
 */
function toPromise(renderer) {
  // this.sequence, this.batchSize, this.dataReactAttrs
  var buffer = {
    value: [],
    push(segment) {
      this.value.push(segment);
    }
  };

  return new Promise(function (resolve, reject) {
    return setImmediate(asyncBatch, renderer, buffer, resolve, reject);
  }).then(function () {
    return Promise.all(buffer.value);
  }).then(function (chunks) {
    var html = chunks.filter(function (chunk) {
      return typeof chunk === "string";
    }).join("");

    if (renderer.dataReactAttrs && !COMMENT_START.test(html)) {
      var checksum = renderer.checksum();
      html = html.replace(TAG_END, ` data-react-checksum="${checksum}"$&`);
    }

    return html;
  });
}

module.exports = toPromise;