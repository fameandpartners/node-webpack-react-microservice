"use strict";

var _require = require("../frame-cache"),
    FrameCache = _require.FrameCache;

function getCachedFrameFactory(_ref) {
  var get = _ref.get,
      set = _ref.set;

  var intermediateCache = Object.create(null);

  // eslint-disable-next-line max-params
  return function getCachedFrame(node, cacheKey, delegateFn, Sequence) {
    var cacheEntry = intermediateCache[cacheKey];
    if (cacheEntry) {
      return cacheEntry.fork();
    }

    var createIntermediateEntry = function createIntermediateEntry() {
      var onCompress = function onCompress(buffer) {
        set(cacheKey, buffer).then(function () {
          intermediateCache[cacheKey] = null;
        });
      };

      var seq = new Sequence();
      delegateFn(seq, node);

      var newCacheEntry = intermediateCache[cacheKey] = new FrameCache(onCompress, seq);
      return newCacheEntry.fork();
    };

    return get(cacheKey).then(function (segments) {
      if (!segments) {
        return createIntermediateEntry();
      }

      return {
        patch: function patch(originalSequence) {
          segments.forEach(function (segment) {
            return originalSequence.emit(function () {
              return segment;
            });
          });
        }
      };
    });
  };
}

module.exports = getCachedFrameFactory;