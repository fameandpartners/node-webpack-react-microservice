'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Declaration2 = require('./Declaration');

var _Declaration3 = _interopRequireDefault(_Declaration2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VarDeclaration = function (_Declaration) {
  _inherits(VarDeclaration, _Declaration);

  function VarDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, VarDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = VarDeclaration.__proto__ || Object.getPrototypeOf(VarDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'VarDeclaration', _this.constraints = [], _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(VarDeclaration, [{
    key: 'addConstraint',
    value: function addConstraint(constraint) {
      this.constraints.push(constraint);
      return this;
    }
  }, {
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      var constraints = this.constraints,
          type = this.type;

      var hasErrors = false;
      if (type.collectErrors(validation, path, input)) {
        hasErrors = true;
      }
      var length = constraints.length;

      for (var i = 0; i < length; i++) {
        var constraint = constraints[i];
        var violation = constraint(input);
        if (typeof violation === 'string') {
          validation.addError(path, this, violation);
          hasErrors = true;
        }
      }
      return hasErrors;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var constraints = this.constraints,
          type = this.type;

      if (!type.accepts(input)) {
        return false;
      }
      var length = constraints.length;

      for (var i = 0; i < length; i++) {
        var constraint = constraints[i];
        if (typeof constraint(input) === 'string') {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      return this.type.acceptsType(input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare var ' + this.name + ': ' + this.type.toString() + ';';
    }
  }]);

  return VarDeclaration;
}(_Declaration3.default);

exports.default = VarDeclaration;